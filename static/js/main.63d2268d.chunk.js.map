{"version":3,"sources":["components/NumInput.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["NumInput","props","onChange","handleNumValue","value","number","placeholder","className","Button","type","App","state","list","e","setState","target","handleSubValue","preventDefault","temp","console","log","this","onSubmit","map","item","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iQAGaA,G,MAAW,SAACC,GACrB,OACI,2BAAOC,SAAUD,EAAME,eAAgBC,MAAOH,EAAMI,OAAQC,YAAY,kBACpEC,UAAU,cCFTC,EAAS,SAACP,GACnB,OACI,4BAAQQ,KAAK,SAASF,UAAU,OAAhC,gBCiHOG,E,4MAhHXC,MAAQ,CACJN,OAAQ,GACRO,KAAM,CAAC,cAAe,gB,EAI1BT,eAAiB,SAACU,GACd,EAAKC,SAAS,CAAET,OAAQQ,EAAEE,OAAOX,S,EAGrCY,eAAiB,SAACH,GACdA,EAAEI,iBACF,IAAIC,EAAO,EAAKP,MAAMC,KACtB,EAAKE,SAAS,CACVF,KAAK,GAAD,mBAAMM,GAAN,CAAY,EAAKP,MAAMN,SAC3BA,OAAQ,M,uDAQZ,OAFAc,QAAQC,IAAIC,KAAKV,MAAMC,MACvBO,QAAQC,IAAIC,KAAKV,MAAMN,QAEnB,yBAAKE,UAAU,OACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,iBACX,0BAAMe,SAAUD,KAAKL,gBACjB,kBAAC,EAAD,CAAUb,eAAgBkB,KAAKlB,eAAgBE,OAAQgB,KAAKV,MAAMN,SAClE,kBAAC,EAAD,QAGR,wBAAIE,UAAU,aACTc,KAAKV,MAAMC,KAAKW,KAAI,SAAAC,GAAI,OACrB,wBAAIC,IAAKD,GAAOA,c,GApC9BE,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.63d2268d.chunk.js","sourcesContent":["import React from 'react';\n// import 'NumInput.css'\n\nexport const NumInput = (props) => {\n    return (\n        <input onChange={props.handleNumValue} value={props.number} placeholder=\"Enter Number...\"\n            className=\"textbox\" />\n    )\n}\n","import React from 'react'\n// import 'Button.css'\n\n\nexport const Button = (props) => {\n    return (\n        <button type=\"submit\" className=\"btn\" >Add Contact</button>\n    )\n}","import React from 'react';\nimport './App.css';\nimport { NumInput } from './components/NumInput'\nimport { Button } from './components/Button'\n// import { List } from './components/List'\n\nclass App extends React.Component {\n    state = {\n        number: \"\",\n        list: [\"01352757748\", \"01352756914\"]\n    }\n\n\n    handleNumValue = (e) => {\n        this.setState({ number: e.target.value })\n    }\n\n    handleSubValue = (e) => {\n        e.preventDefault()\n        let temp = this.state.list\n        this.setState({\n            list: [...temp, this.state.number],\n            number: \"\"\n        })\n    }\n\n\n    render() {\n        console.log(this.state.list)\n        console.log(this.state.number)\n        return (\n            <div className=\"app\">\n                <div className=\"wrapper\">\n                    <div className=\"frame\">\n                        <div className=\"input-and-btn\">\n                            <form onSubmit={this.handleSubValue}>\n                                <NumInput handleNumValue={this.handleNumValue} number={this.state.number} />\n                                <Button />\n                            </form>\n                        </div>\n                        <ul className=\"list-list\">\n                            {this.state.list.map(item => (\n                                <li key={item}>{item}</li>\n                            ))}\n                        </ul>\n\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n// export const NumInput = (props) => {\n//     return (\n//         <input onChange={props.handleNumValue} value={props.number} placeholder=\"Enter Number...\"\n//             className=\"textbox\" />\n//     )\n// }\n\n// export const Button = (props) => {\n//     return (\n//         <button type=\"submit\" className=\"btn\">Add Contact</button>\n//     )\n// }\n\n\n\n\n\n\n// class App extends React.Component {\n//     state = {\n//         number: \"\",\n//         list: [\"01352757748\", \"01352756914\"]\n//     }\n\n//     handleNumValue = (e) => {\n//         this.setState({ number: e.target.value })\n//     }\n\n//     handleSubValue = () => {\n//         let temp = this.state.list\n//         this.setState({ list: [...temp, this.state.number] })\n//     }\n\n\n\n//     render() {\n//         console.log(this.state.list)\n//         console.log(this.state.number)\n//         return (\n//             <div className=\"app\">\n//                 <div className=\"wrapper\">\n//                     <div className=\"frame\">\n//                         <div className=\"input-and-btn\">\n//                             <form onSubmit={this.handleSubValue}>\n//                                 <NumInput handleNumValue={this.handleNumValue} number={this.state.number} />\n//                                 <Button />\n//                             </form>\n//                         </div>\n//                         <div className=\"list\">\n//                             <h1>{this.state.number}</h1>\n//                         </div>\n//                     </div>\n//                 </div>\n//             </div>\n//         )\n//     }\n// }\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}